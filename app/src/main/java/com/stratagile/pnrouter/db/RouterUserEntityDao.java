package com.stratagile.pnrouter.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROUTER_USER_ENTITY".
*/
public class RouterUserEntityDao extends AbstractDao<RouterUserEntity, Long> {

    public static final String TABLENAME = "ROUTER_USER_ENTITY";

    /**
     * Properties of entity RouterUserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserSN = new Property(1, String.class, "UserSN", false, "USER_SN");
        public final static Property UserType = new Property(2, int.class, "UserType", false, "USER_TYPE");
        public final static Property Active = new Property(3, int.class, "Active", false, "ACTIVE");
        public final static Property IdentifyCode = new Property(4, String.class, "IdentifyCode", false, "IDENTIFY_CODE");
        public final static Property Mnemonic = new Property(5, String.class, "Mnemonic", false, "MNEMONIC");
        public final static Property NickName = new Property(6, String.class, "NickName", false, "NICK_NAME");
        public final static Property UserId = new Property(7, String.class, "UserId", false, "USER_ID");
        public final static Property LastLoginTime = new Property(8, int.class, "LastLoginTime", false, "LAST_LOGIN_TIME");
        public final static Property CreateTime = new Property(9, int.class, "CreateTime", false, "CREATE_TIME");
        public final static Property Qrcode = new Property(10, String.class, "Qrcode", false, "QRCODE");
        public final static Property NickSouceName = new Property(11, String.class, "nickSouceName", false, "NICK_SOUCE_NAME");
        public final static Property Uid = new Property(12, int.class, "Uid", false, "UID");
    }


    public RouterUserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public RouterUserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROUTER_USER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_SN\" TEXT," + // 1: UserSN
                "\"USER_TYPE\" INTEGER NOT NULL ," + // 2: UserType
                "\"ACTIVE\" INTEGER NOT NULL ," + // 3: Active
                "\"IDENTIFY_CODE\" TEXT," + // 4: IdentifyCode
                "\"MNEMONIC\" TEXT," + // 5: Mnemonic
                "\"NICK_NAME\" TEXT," + // 6: NickName
                "\"USER_ID\" TEXT," + // 7: UserId
                "\"LAST_LOGIN_TIME\" INTEGER NOT NULL ," + // 8: LastLoginTime
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 9: CreateTime
                "\"QRCODE\" TEXT," + // 10: Qrcode
                "\"NICK_SOUCE_NAME\" TEXT," + // 11: nickSouceName
                "\"UID\" INTEGER NOT NULL );"); // 12: Uid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROUTER_USER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RouterUserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String UserSN = entity.getUserSN();
        if (UserSN != null) {
            stmt.bindString(2, UserSN);
        }
        stmt.bindLong(3, entity.getUserType());
        stmt.bindLong(4, entity.getActive());
 
        String IdentifyCode = entity.getIdentifyCode();
        if (IdentifyCode != null) {
            stmt.bindString(5, IdentifyCode);
        }
 
        String Mnemonic = entity.getMnemonic();
        if (Mnemonic != null) {
            stmt.bindString(6, Mnemonic);
        }
 
        String NickName = entity.getNickName();
        if (NickName != null) {
            stmt.bindString(7, NickName);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(8, UserId);
        }
        stmt.bindLong(9, entity.getLastLoginTime());
        stmt.bindLong(10, entity.getCreateTime());
 
        String Qrcode = entity.getQrcode();
        if (Qrcode != null) {
            stmt.bindString(11, Qrcode);
        }
 
        String nickSouceName = entity.getNickSouceName();
        if (nickSouceName != null) {
            stmt.bindString(12, nickSouceName);
        }
        stmt.bindLong(13, entity.getUid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RouterUserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String UserSN = entity.getUserSN();
        if (UserSN != null) {
            stmt.bindString(2, UserSN);
        }
        stmt.bindLong(3, entity.getUserType());
        stmt.bindLong(4, entity.getActive());
 
        String IdentifyCode = entity.getIdentifyCode();
        if (IdentifyCode != null) {
            stmt.bindString(5, IdentifyCode);
        }
 
        String Mnemonic = entity.getMnemonic();
        if (Mnemonic != null) {
            stmt.bindString(6, Mnemonic);
        }
 
        String NickName = entity.getNickName();
        if (NickName != null) {
            stmt.bindString(7, NickName);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(8, UserId);
        }
        stmt.bindLong(9, entity.getLastLoginTime());
        stmt.bindLong(10, entity.getCreateTime());
 
        String Qrcode = entity.getQrcode();
        if (Qrcode != null) {
            stmt.bindString(11, Qrcode);
        }
 
        String nickSouceName = entity.getNickSouceName();
        if (nickSouceName != null) {
            stmt.bindString(12, nickSouceName);
        }
        stmt.bindLong(13, entity.getUid());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RouterUserEntity readEntity(Cursor cursor, int offset) {
        RouterUserEntity entity = new RouterUserEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UserSN
            cursor.getInt(offset + 2), // UserType
            cursor.getInt(offset + 3), // Active
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // IdentifyCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Mnemonic
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // NickName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // UserId
            cursor.getInt(offset + 8), // LastLoginTime
            cursor.getInt(offset + 9), // CreateTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Qrcode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // nickSouceName
            cursor.getInt(offset + 12) // Uid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RouterUserEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserSN(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserType(cursor.getInt(offset + 2));
        entity.setActive(cursor.getInt(offset + 3));
        entity.setIdentifyCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMnemonic(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNickName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLastLoginTime(cursor.getInt(offset + 8));
        entity.setCreateTime(cursor.getInt(offset + 9));
        entity.setQrcode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNickSouceName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUid(cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RouterUserEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RouterUserEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RouterUserEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
